{"version":3,"sources":["components/navbar.jsx","mockScoreAPI.js","components/tableHead.jsx","components/tableBody.jsx","common/input.jsx","components/addnew.jsx","components/scores.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","style","opacity","boxShadow","color","scores","_id","name","score","TableHeader","raiseSort","newOrder","props","sortOrder","onSort","renderSortIcon","this","columns","map","column","key","label","onClick","Component","TableBody","counter","sortingOrder","length","Input","placeholder","onChange","error","type","AddNewButton","state","data","errors","opened","schema","player","Joi","string","alphanum","required","min","points","number","handleChange","input","currentTarget","errorMessage","validateProperty","value","setState","validate","abortEarly","details","item","path","message","obj","handleSubmit","e","preventDefault","onSubmit","target","reset","toggle","console","log","Fragment","Button","aria-expanded","aria-controls","Collapse","in","id","disabled","Scoreboard","handleSort","sortingByScore","point","newScore","Date","now","toString","scoreList","push","updatedList","unorganisedScores","a","b","list","order","sortedList","sort","compare","reverse","totalCount","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b74fa607.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NavBar = () => {\n  return (\n    <nav\n      className=\"navbar navbar-light bg-light\"\n      style={{\n        opacity: \".6\",\n        boxShadow: \"2px 1px rgba(0, 0, 0, 0.2)\"\n      }}\n    >\n      <span className=\"navbar-brand mb-0 h1\" style={{ color: \"black\" }}>\n        My ScoreTracker\n      </span>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","const scores = [\n  {\n    _id: \"5b21ca3eeb7f6fbccd471810\",\n    name: \"Shakira\",\n    score: 6\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471811\",\n    name: \"Lizzie\",\n    score: 4\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471812\",\n    name: \"Storm Trooper\",\n    score: 8\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471813\",\n    name: \"Dexter\",\n    score: 5\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471814\",\n    name: \"Rocky\",\n    score: 3\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471815\",\n    name: \"Milka\",\n    score: 1\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471816\",\n    name: \"Chewbacca\",\n    score: 7\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471817\",\n    name: \"Redbull\",\n    score: 9\n  }\n];\n\nexport function getScores() {\n  return scores;\n}\n\nexport function createScore(player, points) {\n  const newScore = { _id: Date.now().toString(), name: player, score: points };\n  return newScore;\n}\n","import React, { Component } from \"react\";\n\nclass TableHeader extends Component {\n  raiseSort = () => {\n    const sortOrder = this.props.sortOrder;\n    const newOrder = sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    this.props.onSort(newOrder);\n  };\n\n  renderSortIcon = () => {\n    const { sortOrder } = this.props;\n    if (sortOrder === \"asc\") return <i className=\"fa fa-sort-asc\" />;\n    return <i className=\"fa fa-sort-desc\" />;\n  };\n\n  render() {\n    return (\n      <thead>\n        <tr>\n          {this.props.columns.map(column => (\n            <th\n              className=\"clickable\"\n              key={column.label}\n              onClick={\n                column.label === \"Points\" ? () => this.raiseSort() : null\n              }\n            >\n              {column.label}{\" \"}\n              {column.label === \"Points\" ? this.renderSortIcon() : null}\n            </th>\n          ))}\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default TableHeader;\n","import React, { Component } from \"react\";\n\nclass TableBody extends Component {\n  render() {\n    let counter =\n      this.props.sortingOrder === \"desc\" ? 0 : this.props.scores.length + 1;\n    return (\n      <tbody>\n        {this.props.scores.map(score => (\n          <tr key={score._id}>\n            <td>\n              {\n                (counter =\n                  counter + (this.props.sortingOrder === \"desc\" ? 1 : -1))\n              }\n            </td>\n            <td>{score.name}</td>\n            <td>{score.score}</td>\n          </tr>\n        ))}\n      </tbody>\n    );\n  }\n}\n\nexport default TableBody;\n","import React from \"react\";\n\nconst Input = ({ name, placeholder, onChange, error }) => {\n  return (\n    <div className=\"form-group\">\n      <input\n        name={name}\n        type=\"text\"\n        className=\"form-control\"\n        placeholder={placeholder}\n        onChange={onChange}\n      />\n      {error && <div className=\"alert alert-danger\">{error}</div>}\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport Joi from \"joi-browser\";\nimport { Collapse, Button } from \"react-bootstrap\";\nimport Input from \"../common/input\";\n\nclass AddNewButton extends Component {\n  state = {\n    data: {},\n    errors: {},\n    opened: false\n  };\n\n  schema = {\n    player: Joi.string()\n      .alphanum()\n      .required()\n      .min(1)\n      .label(\"Player\"),\n    points: Joi.number()\n      .required()\n      .min(0)\n      .label(\"Points\")\n  };\n\n  handleChange = ({ currentTarget: input }) => {\n    const errors = { ...this.state.errors };\n    const errorMessage = this.validateProperty(input);\n    if (errorMessage) errors[input.name] = errorMessage;\n    else delete errors[input.name];\n\n    const data = { ...this.state.data };\n    data[input.name] = input.value;\n    this.setState({ data, errors });\n  };\n\n  validate = () => {\n    const options = { abortEarly: false };\n    const { error } = Joi.validate(this.state.data, this.schema, options);\n    if (!error) return null;\n\n    const errors = {};\n    for (let item of error.details) errors[item.path[0]] = item.message;\n    return errors;\n  };\n\n  validateProperty = ({ name, value }) => {\n    const obj = { [name]: value };\n    const schema = { [name]: this.schema[name] };\n    const { error } = Joi.validate(obj, schema);\n    return error ? error.details[0].message : null;\n  };\n\n  handleSubmit = e => {\n    const { data } = this.state;\n    const errors = this.validate();\n    this.setState({ errors: errors || {} });\n    if (errors) return;\n    e.preventDefault();\n    this.props.onSubmit(data.player, data.points);\n    e.target.reset();\n    this.toggle();\n  };\n\n  toggle = e => {\n    this.setState({ opened: !this.state.opened });\n    console.log(this.state.opened);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <p>\n          <Button\n            className=\"btn btn-dark btn-block\"\n            type=\"button\"\n            aria-expanded={this.state.opened}\n            aria-controls=\"collapseForm\"\n            onClick={this.toggle}\n          >\n            Add New Player Score\n          </Button>\n        </p>\n        <Collapse in={this.state.opened}>\n          <div id=\"collapseForm\">\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <Input\n                    name=\"player\"\n                    placeholder=\"Player name\"\n                    onChange={this.handleChange}\n                    error={this.state.errors[\"player\"]}\n                  />\n                </div>\n                <div className=\"col\">\n                  <Input\n                    name=\"points\"\n                    placeholder=\"Total score\"\n                    onChange={this.handleChange}\n                    error={this.state.errors[\"points\"]}\n                  />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button\n                    disabled={this.validate()}\n                    className=\"btn btn-dark btn-block\"\n                    type=\"submit\"\n                  >\n                    Submit\n                  </button>\n                </div>\n                <div className=\"col\">\n                  <button\n                    className=\"btn btn-dark btn-block\"\n                    type=\"reset\"\n                    onClick={this.toggle}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </Collapse>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AddNewButton;\n","import React, { Component } from \"react\";\nimport { getScores, createScore } from \"../mockScoreAPI\";\nimport TableHeader from \"./tableHead\";\nimport TableBody from \"./tableBody\";\nimport AddNewButton from \"./addnew\";\n\nclass Scoreboard extends Component {\n  state = {\n    scores: [],\n    columns: [{ label: \"Position\" }, { label: \"Player\" }, { label: \"Points\" }],\n    sortOrder: \"desc\"\n  };\n\n  componentDidMount() {\n    const unorganisedScores = getScores();\n    this.setState({\n      scores: this.sortingByScore(unorganisedScores, this.state.sortOrder)\n    });\n  }\n\n  handleSort = sortOrder => {\n    this.setState({\n      sortOrder\n    });\n    this.setState({\n      scores: this.sortingByScore(this.state.scores, sortOrder)\n    });\n  };\n\n  compare(a, b) {\n    if (a.score < b.score) {\n      return -1;\n    }\n    if (a.score > b.score) {\n      return 1;\n    }\n    return 0;\n  }\n\n  sortingByScore(list, order) {\n    const sortedList = list.sort(this.compare);\n    if (order === \"desc\") return sortedList.reverse();\n    return sortedList;\n  }\n  handleSubmit = (name, point) => {\n    const { scores, sortOrder } = this.state;\n    const newScore = createScore(name, point);\n    const scoreList = scores;\n    scoreList.push(newScore);\n    const updatedList = this.sortingByScore(scoreList, sortOrder);\n    this.setState({\n      scores: updatedList\n    });\n  };\n\n  render() {\n    const { columns, sortOrder, scores } = this.state;\n    const totalCount = scores.length;\n\n    return totalCount === 0 ? (\n      <React.Fragment>\n        <h3>There are no scores to show.</h3>\n        <AddNewButton onSubmit={this.handleSubmit} />\n      </React.Fragment>\n    ) : (\n      <React.Fragment>\n        <h3>{\"Showing \" + totalCount + \" ranking results in the list.\"}</h3>\n\n        <table className=\"table table-hover\">\n          <TableHeader\n            columns={columns}\n            onSort={this.handleSort}\n            sortOrder={sortOrder}\n          />\n          <TableBody scores={scores} sortingOrder={sortOrder} />\n        </table>\n        <AddNewButton onSubmit={this.handleSubmit} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Scoreboard;\n","import React from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Scoreboard from \"./components/scores\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <main className=\"container\">\n        <Scoreboard />\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}